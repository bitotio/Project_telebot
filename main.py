# –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò
import asyncio
import json
import os
from datetime import datetime, timedelta
from random import choice

# –°–¢–û–†–û–ù–ù–ò–ï –ü–ê–ö–ï–¢–´
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.types import WebAppInfo

# –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
from dotenv import load_dotenv


# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
load_dotenv()                  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
TOKEN = os.getenv("BOT_TOKEN") # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

THEORY_FILE = "theory_.json"   # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
TASKS_FILE = "tasks.json"      # –ë–∞–Ω–∫ –∑–∞–¥–∞—á
TESTS_FILE = "tests.json"      # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã


# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
bot = Bot(token=TOKEN)    # –ö–ª–∏–µ–Ω—Ç API Telegram
dp = Dispatcher()         # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()         # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
dp.include_router(router) # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤


# –°–õ–û–í–ê–†–ò –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: –¥–∞–Ω–Ω—ã–µ)
user_tests = {}         # –¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã)
user_states = {}        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–º–µ–Ω—é/—Ç–µ—Å—Ç—ã/–∑–∞–¥–∞—á–∏/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
user_reminders = {}     # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (user_id: datetime)
user_test_progress = {} # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–æ–ø—Ä–æ—Å—ã/–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
user_tasks = {}         # –ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
user_stats = {}         # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ä–µ—à–µ–Ω–∏—è/—Ç–µ—Å—Ç—ã/–±–µ–π–¥–∂–∏)
user_solved_items = {}  # ID —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤)


# –ö–û–ù–°–¢–ê–ù–¢–´ –°–û–°–¢–û–Ø–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
STATE_TASKS = "tasks" # –†–µ–∂–∏–º —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
STATE_TESTS = "tests" # –†–µ–∂–∏–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
STATE_NONE = "none"   # –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è


# –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó JSON-–§–ê–ô–õ–û–í
with open(THEORY_FILE, "r", encoding="utf-8") as f:
    theory_data = json.load(f)         # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

with open(TASKS_FILE, "r", encoding="utf-8") as f:
    tasks_data = json.load(f)          # –ë–∞–Ω–∫ –∑–∞–¥–∞—á

with open(TESTS_FILE, "r", encoding="utf-8") as f:
    tests_data = json.load(f)["tests"] # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–∫–ª—é—á "tests")


# –ó–ê–ì–†–£–ó–ö–ê –°–¢–ò–ö–ï–†–û–í
STICKERS = {
    "welcome": "CAACAgIAAxkBAAEBL-Nn6lkZ7MFhFH7SsrWG0-RepGg9iQAC1AwAAnqLoEieLyIklDO8mzYE",

    "recommend": [
        "CAACAgIAAxkBAAEBL-Vn6lluax4ZbJbK-WtvoYcrpp4C9QACYw4AAgtaoEg7Cb-9icYZzTYE",
        "CAACAgIAAxkBAAEBL-Fn6lkQPCM5BJxta5iUILFblCL_pgACZg8AAlGwsEiUHH3OCPuZqTYE",
        "CAACAgIAAxkBAAEBL-dn6lmHFcSeAneJnnlze5VmVyRg6QACYQ8AAp5wmEhb4tJtlpFD-TYE"
    ],

    "progress": [
        "CAACAgIAAxkBAAEBL-9n6lmv8bgTjgAB28BYiMBoYp3Re0kAAmgNAAK0oaFIHliZ98qHA0E2BA",
        "CAACAgIAAxkBAAEBL-1n6lmoCFPLVdwdJESnIDEE9Rz__AACrQ4AAuR6QUt_BjUr8hmSxjYE",
        "CAACAgIAAxkBAAEBL-Nn6lkZ7MFhFH7SsrWG0-RepGg9iQAC1AwAAnqLoEieLyIklDO8mzYE"
    ],

    "experiments": "CAACAgIAAxkBAAEBL-ln6lmTrqWYAbh8UyUmAAEdBdFmXI8AAnIPAAIkWqBIiNZAMrUUvc42BA",

    "reminders": [
        "CAACAgIAAxkBAAEBL99n6lkBOEfehT01DDi-_qOVQT5KfwACGxMAAlqS2EhjB6Z1XtCrlzYE",
        "CAACAgIAAxkBAAEBL-Nn6lkZ7MFhFH7SsrWG0-RepGg9iQAC1AwAAnqLoEieLyIklDO8mzYE"
    ]
}


# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def get_topics():
    return [test["topic"] for test in tests_data]


def get_tests_by_topic(topic):
    for test in tests_data:
        if test["topic"] == topic: # –ù–∞—Ö–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã
            return test["questions"]
    return []                      # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: list –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


# –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å 6 –∫–Ω–æ–ø–∫–∞–º–∏ –≤ 3 —Ä—è–¥–∞
def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìò –¢–µ–æ—Ä–∏—è"), KeyboardButton(text="üìö –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üìä –¢–µ—Å—Ç—ã"), KeyboardButton(text="üîó –°—Å—ã–ª–∫–∏")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")],
            [KeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"), KeyboardButton(text="üî¨ 3D-–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã")]
        ],
        resize_keyboard=True
    )

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
def create_progress_bar(current, total, width=20):
    percent = (current / total) * 100   # –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100%)

    # –°—á–∏—Ç–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ ‚ñà –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
    filled = int(round(width * current / total)) if total > 0 else 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

    if percent < 30:
        bar_color = "üî¥"
    elif percent < 70:
        bar_color = "üü°"
    else:
        bar_color = "üü¢"

    bar = f"{bar_color} [{'‚ñà' * filled}{'‚ñë' * (width - filled)}] {current}/{total} ({round(percent)}%)"
    return bar        # –§–æ—Ä–º–∞—Ç: "üü° [‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë] 5/10 (50%)"



def init_user_data(user_id):

    # –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤:
    #    - user_stats: —Ö—Ä–∞–Ω–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    #    - user_solved_items: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π

    if user_id not in user_stats:
        user_stats[user_id] = {
            "solved_tasks": 0,                       # –ö–æ–ª-–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            "total_tasks": len(tasks_data["tasks"]), # –í—Å–µ–≥–æ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–æ
            "correct_tests": 0,                      # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—Å—Ç–∞—Ö
            "total_questions": sum(len(t["questions"]) for t in tests_data), # –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            "tests_taken": 0,                        # –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            "badges": ["–ù–æ–≤–∏—á–æ–∫"],                   # –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–π–¥–∂–∏
            "weak_topics": {}                        # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        }

    if user_id not in user_solved_items:
        user_solved_items[user_id] = {
            "solved_tasks": set(),                   # –ü—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è ID —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            "correct_questions": set()               # –ü—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        }

# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ–æ
def get_random_sticker(sticker_type):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ç–∏–ø —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ STICKERS
        if sticker_type not in STICKERS:
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ –∫–ª—é—á—É
        sticker = STICKERS[sticker_type]
        if isinstance(sticker, list):
            return choice(sticker)

        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
        return sticker

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        print(f"Error getting sticker: {e}")
        return None


# –ï–î–ò–ù–û–ô –ë–õ–û–ö –†–û–£–¢–ï–†–û–í –ò –•–≠–ù–î–õ–ï–†–û–í
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_stats:
        init_user_data(user_id)    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ user_stats –∏ user_solved_items

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ —Ñ–∏–∑–∏–∫–µ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await message.answer_sticker(sticker=STICKERS["welcome"])


@router.message(lambda message: message.text == "üìò –¢–µ–æ—Ä–∏—è")
async def send_theory_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    for topic in theory_data["—Ç–µ–º—ã"]:
        button = InlineKeyboardButton(
            text=f"{topic['–Ω–æ–º–µ—Ä']}. {topic['–Ω–∞–∑–≤–∞–Ω–∏–µ']}", # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            callback_data=f"topic_{topic['–Ω–æ–º–µ—Ä']}"        # –î–∞–Ω–Ω—ã–µ –¥–ª—è callback
        )
        keyboard.inline_keyboard.append([button])          # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=keyboard)


@router.callback_query(lambda callback: callback.data.startswith("topic_"))
async def handle_topic_selection(callback: CallbackQuery):

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–º—ã –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç "topic_<–Ω–æ–º–µ—Ä>")
    topic_number = int(callback.data.split("_")[1])

    # –ò—â–µ–º —Ç–µ–º—É –≤ theory_data –ø–æ –Ω–æ–º–µ—Ä—É
    selected_topic = next((t for t in theory_data["—Ç–µ–º—ã"] if t["–Ω–æ–º–µ—Ä"] == topic_number), None)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ç–µ–º—ã (HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    if selected_topic:
        response = f"üìò <b>{selected_topic['–Ω–∞–∑–≤–∞–Ω–∏–µ']}</b>\n\n{selected_topic['—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ']}"
        await callback.message.answer(response, parse_mode="HTML")
    else:
        await callback.message.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏ "–∑–∞–≤–∏—Å–∞–Ω–∏—è")
    await callback.answer()


@router.message(lambda message: message.text == "üìö –ó–∞–¥–∞—á–∏")
async def send_task_topics(message: types.Message):
    user_id = message.from_user.id      # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = STATE_TASKS  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –∑–∞–¥–∞—á –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    topics = set(task["topic"] for task in tasks_data["tasks"])

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    for topic in topics:

        # Callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        keyboard.button(text=topic, callback_data=f"task_topic_{topic}")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥)
    keyboard.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∑–∞–¥–∞—á:", reply_markup=keyboard.as_markup())


@router.callback_query(lambda callback: callback.data.startswith("task_topic_"))
async def handle_task_topic_selection(callback: CallbackQuery):

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ callback_data
    topic = callback.data.replace("task_topic_", "")
    user_id = callback.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
    init_user_data(user_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    tasks = [task for task in tasks_data["tasks"] if task["topic"] == topic]

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    if not tasks:
        await callback.message.answer("‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tasks[user_id] = {"tasks": tasks, "current_task_index": 0}

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    user_states[user_id] = STATE_TASKS

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
    await send_next_task(callback.message, user_id)
    await callback.answer()


async def send_next_task(message: types.Message, user_id: int):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_tasks:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = user_tasks[user_id]

    # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
    task = user_state["tasks"][user_state["current_task_index"]]

    await message.answer(f"üìö <b>–ó–∞–¥–∞—á–∞:</b>\n{task['question']}", parse_mode="HTML")


async def handle_task_answer(message: types.Message):
    user_id = message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    init_user_data(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    if user_id not in user_tasks:
        await message.answer("‚ùå –¢—ã –Ω–µ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏ —Å–µ–π—á–∞—Å.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    user_state = user_tasks[user_id]
    task = user_state["tasks"][user_state["current_task_index"]]

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–Ω—ã—Ö
    task_id = f"{task['topic']}_{task['question'][:50]}"

    try:

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —á–∏—Å–ª–æ
        user_answer = float(message.text.strip())

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º (—Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏)
        is_correct = abs(user_answer - task["answer"]) < 0.001

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞
        if is_correct and task_id not in user_solved_items[user_id]["solved_tasks"]:

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            user_stats[user_id]["solved_tasks"] += 1

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–µ—à–µ–Ω–Ω—ã–µ
            user_solved_items[user_id]["solved_tasks"].add(task_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –±–µ–π–¥–∂–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            await check_and_award_badges(message, user_id)
        else:

            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º
            if not is_correct:
                update_weak_topics(user_id, task["topic"])

        response = (
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n<b>–†–µ—à–µ–Ω–∏–µ:</b> {task['solution']}" if is_correct
            else f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\n<b>–†–µ—à–µ–Ω–∏–µ:</b> {task['solution']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
        await message.answer(response, parse_mode="HTML")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–¥–∞—á
        user_state["current_task_index"] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∑–∞–¥–∞—á–∏
        if user_state["current_task_index"] < len(user_state["tasks"]):
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –µ—â–µ –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é
            await send_next_task(message, user_id)
        else:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å - —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            await message.answer("üéâ –¢—ã —Ä–µ—à–∏–ª –≤—Å–µ –∑–∞–¥–∞—á–∏!", reply_markup=get_main_menu_keyboard())
            del user_tasks[user_id]

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç.")


@router.message(lambda message: message.text == "üìä –¢–µ—Å—Ç—ã")
async def send_test_topics(message: types.Message):

    user_id = message.from_user.id      # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    init_user_data(user_id)             # –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ user_stats –∏ user_solved_items –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    user_states[user_id] = STATE_TESTS  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    topics = get_topics()
    if not topics:
        await message.answer("–¢–µ—Å—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for index, topic in enumerate(topics):

        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–µ –∏–Ω–¥–µ–∫—Å –≤ callback_data
        button = InlineKeyboardButton(text=topic, callback_data=f"test_topic_{index}")
        keyboard.inline_keyboard.append([button])

    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:", reply_markup=keyboard)


@router.callback_query(lambda callback: callback.data.startswith("test_topic_"))
async def handle_test_topic_selection(callback: CallbackQuery):
    user_id = callback.from_user.id     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    init_user_data(user_id)             # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–º—ã –∏–∑ callback_data
    topic_index = int(callback.data.replace("test_topic_", ""))
    topics = get_topics()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–º—ã
    if topic_index < 0 or topic_index >= len(topics):
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    topic = topics[topic_index]
    tests = get_tests_by_topic(topic)   # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ

    if not tests:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞
    user_test_progress[user_id] = {
        "topic": topic,                 # –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ —Ç–µ—Å—Ç–∞
        "tests": tests,                 # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        "current_question_index": 0,    # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        "correct_answers": 0            # –°—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    }
    user_states[user_id] = STATE_TESTS  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"

    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await send_next_test_question(callback.message, user_id)
    await callback.answer()


async def send_next_test_question(message: types.Message, user_id: int):

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
    if user_id not in user_test_progress:
        await message.answer("‚ùå –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ —Ç–µ–º—É –∏–∑ –º–µ–Ω—é.")
        return

    progress = user_test_progress[user_id]
    tests = progress["tests"]
    current_index = progress["current_question_index"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if current_index >= len(tests):

        # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
        correct = progress["correct_answers"]
        total = len(tests)
        percentage = round(100 * correct / total) if total > 0 else 0

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats[user_id]["tests_taken"] = user_stats[user_id].get("tests_taken", 0) + 1
        await check_and_award_badges(message, user_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–π

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        response = (
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total} ({percentage}%)\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if percentage > 0.5 else
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total} ({percentage}%)\n"
            "–ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª!\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await message.answer(response, reply_markup=get_main_menu_keyboard())
        del user_test_progress[user_id]            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        return

    test = tests[current_index]                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    user_tests[user_id] = test                     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –Ω–æ–º–µ—Ä–æ–º
    question_text = f"üìä <b>–í–æ–ø—Ä–æ—Å {current_index + 1}:</b>\n{test['question']}"
    await message.answer(question_text, parse_mode="HTML")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=option, callback_data=f"answer_{i}")]
        for i, option in enumerate(test["options"]) # –ù—É–º–µ—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=keyboard)


@router.callback_query(lambda callback: callback.data.startswith("answer_"))
async def handle_answer_selection(callback: CallbackQuery):

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    if user_id not in user_tests or user_id not in user_test_progress:
        await callback.answer("–û—à–∏–±–∫–∞! –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    test = user_tests[user_id]
    progress = user_test_progress[user_id]
    user_answer_index = int(callback.data.split("_")[1])    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞
    question_id = f"{test['question'][:50]}"                # –°–æ–∑–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = user_answer_index in test["answer"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if is_correct:
        if question_id not in user_solved_items[user_id]["correct_questions"]:
            progress["correct_answers"] += 1
            user_stats[user_id]["correct_tests"] += 1
            user_solved_items[user_id]["correct_questions"].add(question_id)
            await check_and_award_badges(callback.message, user_id)
        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        update_weak_topics(user_id, progress["topic"])
        correct_answers = ", ".join([test["options"][i] for i in test["answer"]])
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answers}</b>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.answer(response, parse_mode="HTML")

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    del user_tests[user_id]

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if user_id in user_test_progress:
        user_test_progress[user_id]["current_question_index"] += 1
        await send_next_test_question(callback.message, user_id)

    await callback.answer()     # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback


@router.callback_query(lambda callback: callback.data == "next_question")
async def handle_next_question(callback: CallbackQuery):
    user_id = callback.from_user.id

    if user_id not in user_test_progress:
        await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    progress = user_test_progress[user_id]
    progress["current_question_index"] += 1

    if progress["current_question_index"] < len(progress["tests"]):
        await send_next_test_question(callback.message, user_id)
    else:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        correct = progress["correct_answers"]
        total = len(progress["tests"])
        percentage = round(100 * correct / total) if total > 0 else 0

        user_stats[user_id]["tests_taken"] += 1
        await callback.message.answer(
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total} ({percentage}%)\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
        del user_test_progress[user_id]

    await callback.answer()


async def check_and_award_badges(message: types.Message, user_id: int):
    if user_id not in user_stats:
        return                      # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - –≤—ã—Ö–æ–¥–∏–º

    stats = user_stats[user_id]
    badges = stats["badges"]        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–µ–π–¥–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ë–µ–π–¥–∂ –∑–∞ —Ä–µ—à–µ–Ω–∏–µ 10 —Ç–µ—Å—Ç–æ–≤
    if stats["correct_tests"] >= 10 and "–†–µ—à–∏–ª 10 —Ç–µ—Å—Ç–æ–≤" not in badges:
        badges.append("–†–µ—à–∏–ª 10 —Ç–µ—Å—Ç–æ–≤")
        await message.answer("üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ ¬´–†–µ—à–∏–ª 10 —Ç–µ—Å—Ç–æ–≤¬ª!")

    # –ë–µ–π–¥–∂ –∑–∞ —Ä–µ—à–µ–Ω–∏–µ 50 —Ç–µ—Å—Ç–æ–≤
    if stats["correct_tests"] >= 50 and "–†–µ—à–∏–ª 50 —Ç–µ—Å—Ç–æ–≤" not in badges:
        badges.append("–†–µ—à–∏–ª 50 —Ç–µ—Å—Ç–æ–≤")
        await message.answer("üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ ¬´–†–µ—à–∏–ª 50 —Ç–µ—Å—Ç–æ–≤¬ª!")

    # –ë–µ–π–¥–∂ –∑–∞ 100% –≤ —Ç–µ—Å—Ç–µ
    if user_id in user_test_progress:
        progress = user_test_progress[user_id]
        correct = progress["correct_answers"]
        total = len(progress["tests"])
        if correct == total and "–¢–µ—Å—Ç –Ω–∞ 100%" not in badges:
            badges.append("–¢–µ—Å—Ç –Ω–∞ 100%")
            await message.answer("üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ ¬´–¢–µ—Å—Ç –Ω–∞ 100%¬ª!")

    # –ë–µ–π–¥–∂ –∑–∞ 2 —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if stats.get("solved_tasks", 0) >= 2 and "2 –∑–∞–¥–∞—á–∏" not in badges:
        badges.append("2 –∑–∞–¥–∞—á–∏")
        await message.answer("üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –±–µ–π–¥–∂ ¬´2 –∑–∞–¥–∞—á–∏¬ª!")


@router.message(Command("progress"))
@router.message(lambda m: m.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: types.Message):

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞—á–∞–º –∏ —Ç–µ—Å—Ç–∞–º
    user_id = message.from_user.id
    init_user_data(user_id)

    if user_id not in user_stats:
        await message.answer("üìä –í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ç–µ—Å—Ç—ã.")
        return

    stats = user_stats[user_id]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    tasks_progress = create_progress_bar(stats["solved_tasks"], stats["total_tasks"])
    tests_progress = create_progress_bar(stats["correct_tests"], stats["total_questions"])

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if stats["total_tasks"] > 0:
        tasks_percent = round(100 * stats["solved_tasks"] / stats["total_tasks"])
    else:
        tasks_percent = 0

    if stats["total_questions"] > 0:
        tests_percent = round(100 * stats["correct_tests"] / stats["total_questions"])
    else:
        tests_percent = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–π–¥–∂–µ–π
    badges_text = "\n\nüèÖ <b>–í–∞—à–∏ –±–µ–π–¥–∂–∏:</b>\n" + ", ".join(stats.get("badges", ["–ü–æ–∫–∞ –Ω–µ—Ç"])) if stats.get("badges") else ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    response = (
        "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
        f"<b>–ó–∞–¥–∞—á–∏:</b>\n{tasks_progress}\n"
        f"–†–µ—à–µ–Ω–æ: {stats['solved_tasks']}/{stats['total_tasks']} ({tasks_percent}%)\n\n"
        f"<b>–¢–µ—Å—Ç—ã:</b>\n{tests_progress}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_tests']}/{stats['total_questions']} ({tests_percent}%)\n\n"
        f"<b>–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:</b> {stats.get('tests_taken', 0)}"
        f"{badges_text}"
    )

    await message.answer(response, parse_mode="HTML")

    await message.answer_sticker(sticker=get_random_sticker("progress"))    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä


@router.message(Command("recommend"))
@router.message(lambda message: message.text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def handle_recommend_button(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", callback_data="delete_recommend_history")]
    ])

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    await give_recommendation(message, keyboard)


async def give_recommendation(message: types.Message, keyboard=None):

    # –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º
    user_id = message.from_user.id
    init_user_data(user_id)

    if not user_stats[user_id]["weak_topics"]:
        await message.answer(
            "üìä –í—ã –ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–ª–∏ –æ—à–∏–±–æ–∫ –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
            reply_markup=keyboard
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
    topic_errors = user_stats[user_id]["weak_topics"]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_topics = sorted(topic_errors.items(), key=lambda x: x[1], reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = "üìä <b>–í–∞—à–∏ —Å–ª–∞–±—ã–µ —Ç–µ–º—ã:</b>\n"
    for topic, errors in sorted_topics[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
        response += f"\n‚Ä¢ <u>{topic}</u>: {errors} –æ—à–∏–±–æ–∫"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å–æ–≤–µ—Ç
    response += "\n\nüí° –°–æ–≤–µ—Ç: —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —ç—Ç–∏—Ö —Ç–µ–º!"

    await message.answer(response, parse_mode="HTML", reply_markup=keyboard)
    await message.answer_sticker(sticker=get_random_sticker("recommend"))


@router.callback_query(lambda callback: callback.data == "delete_recommend_history")
async def delete_recommend_history(callback: CallbackQuery):
    user_id = callback.from_user.id
    init_user_data(user_id)

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    user_stats[user_id]["weak_topics"] = []

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", callback_data="delete_recommend_history")]
    ])

    await callback.message.answer(
        "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—á–∏—â–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
    )
    await callback.answer()


def update_weak_topics(user_id, topic):

    # –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not topic:
        return                                  # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –≤—ã—Ö–æ–¥–∏–º

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
    if user_id not in user_stats:
        init_user_data(user_id)                 # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è weak_topics (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
    if "weak_topics" not in user_stats[user_id]:
        user_stats[user_id]["weak_topics"] = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è —Ç–µ–º
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ–º—ã
    if topic in user_stats[user_id]["weak_topics"]:
        user_stats[user_id]["weak_topics"][topic] += 1
    else:
        user_stats[user_id]["weak_topics"][topic] = 1


@router.message(lambda message: message.text == "üî¨ 3D-–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã")
async def handle_3d_experiments(message: types.Message):

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å 3D-—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏
    await message.answer(
        "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è 3D-—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üî¨ –û—Ç–∫—Ä—ã—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é", web_app=WebAppInfo(url="https://marisamak.github.io/menu.html"))],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

    await message.answer_sticker(sticker=STICKERS["experiments"])


@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):

    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(lambda message: message.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def set_reminder(message: types.Message):
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    user_states[message.from_user.id] = "setting_reminder"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú. –ù–∞–ø—Ä–∏–º–µ—Ä: 14:30")


async def schedule_reminder(user_id, remind_time):

    # –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    now = datetime.now()
    delay = (remind_time - now).total_seconds()
    await asyncio.sleep(delay)
    if user_id in user_reminders and user_reminders[user_id] == remind_time:
        del user_reminders[user_id]
        await bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í—Ä–µ–º—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É! üöÄ")


async def handle_reminder_time(message: types.Message):

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    user_id = message.from_user.id
    try:

        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        remind_time = datetime.strptime(message.text.strip(), "%H:%M").time()
        now = datetime.now()
        remind_datetime = datetime.combine(now.date(), remind_time)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è - —Å—Ç–∞–≤–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if remind_datetime < now:
            remind_datetime += timedelta(days=1)

        user_reminders[user_id] = remind_datetime
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_datetime.strftime('%H:%M')}.")
        asyncio.create_task(schedule_reminder(user_id, remind_datetime))

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[user_id]
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).")

    await message.answer_sticker(sticker=get_random_sticker("reminders"))

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    await message.answer("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",reply_markup=get_main_menu_keyboard())


@router.message(lambda message: message.text == "üîó –°—Å—ã–ª–∫–∏")
async def send_links(message: types.Message):

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    links = [
        "https://fipi.ru/ege",
        "https://ege.sdamgia.ru/",
        "https://neznaika.info/",
        "https://neofamily.ru/fizika/smart-directory",
        "https://mizenko23.ru/wp-content/uploads/2019/04/jakovlev_fizika-polnyj_kurs_podgotovki_k_egeh.pdf",
        "https://thenewschool.ru/trainer/physics",
        "https://3.shkolkovo.online/catalog?SubjectId=4",
    ]

    links_text = "\n".join([f"üîó <a href=\"{link}\">{link}</a>" for link in links])
    await message.answer(f"–í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n{links_text}", parse_mode="HTML")


@router.message()
async def process_user_message(message: types.Message):

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id
    user_state = user_states.get(user_id, STATE_NONE)

    if user_state == STATE_TASKS:
        await handle_task_answer(message)   # –†–µ–∂–∏–º —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    elif user_state == STATE_TESTS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–æ–≤, –Ω–æ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        await message.answer(
            "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞.")
    elif user_state == "setting_reminder":
        await handle_reminder_time(message) # –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    else:
        await message.answer("‚ÑπÔ∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                             reply_markup=get_main_menu_keyboard())


# –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())